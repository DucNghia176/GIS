import streamlit as st
import streamlit.components.v1 as components
from streamlit_folium import st_folium
import geopandas as gpd
import osmnx as ox
import folium
from shapely.geometry import Point
from streamlit_js_eval import get_geolocation
import matplotlib.pyplot as plt

st.set_page_config(page_title="Ph√¢n t√≠ch ti·∫øp c·∫≠n y t·∫ø H√† N·ªôi", layout="wide")
st.title("üó∫Ô∏è Ph√¢n t√≠ch ti·∫øp c·∫≠n c∆° s·ªü y t·∫ø ·ªü H√† N·ªôi")

@st.cache_data
def load_data():
    import os

    if os.path.exists("hanoi.geojson") and os.path.exists("health_facilities.geojson"):
        hanoi_gdf = gpd.read_file("hanoi.geojson")
        health_facilities_gdf = gpd.read_file("health_facilities.geojson")
    else:
        hanoi_gdf = ox.geocode_to_gdf("Hanoi, Vietnam")

        tags = {"amenity": ["hospital", "clinic", "doctors"]}
        health_facilities_gdf = ox.features_from_place("Hanoi, Vietnam", tags)

        # X·ª≠ l√Ω d·ªØ li·ªáu h√¨nh h·ªçc
        health_facilities_gdf = health_facilities_gdf.to_crs(epsg=3405)
        health_facilities_gdf["geometry"] = health_facilities_gdf["geometry"].centroid
        health_facilities_gdf = health_facilities_gdf.to_crs(epsg=4326)
        health_facilities_gdf['name'] = health_facilities_gdf['name'].fillna("Kh√¥ng r√µ")
        health_facilities_gdf['amenity'] = health_facilities_gdf['amenity'].fillna("Kh√¥ng r√µ")

        # L∆∞u l·∫°i cho l·∫ßn sau (Streamlit Cloud ch·ªâ ƒë·ªçc ƒë∆∞·ª£c, n√™n b·∫°n t·∫°o file n√†y local tr∆∞·ªõc)
        hanoi_gdf.to_file("hanoi.geojson", driver="GeoJSON")
        health_facilities_gdf.to_file("health_facilities.geojson", driver="GeoJSON")

    return hanoi_gdf, health_facilities_gdf

with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu ƒë·ªãa l√Ω ..."):
    hanoi, health_facilities = load_data()

# ======================
# 2Ô∏è Hi·ªÉn th·ªã b·∫£n ƒë·ªì c∆° s·ªü y t·∫ø
# ======================
m = folium.Map(location=[21.0285, 105.8542], zoom_start=11, tiles="CartoDB positron")
folium.GeoJson(hanoi.geometry.iloc[0], name="H√† N·ªôi").add_to(m)

for _, row in health_facilities.iterrows():
    folium.CircleMarker(
        location=[row.geometry.y, row.geometry.x],
        radius=4,
        color="magenta",
        fill=True,
        fill_opacity=0.7,
        popup=f"{row['name']} ({row['amenity']})"
    ).add_to(m)

# ======================
# 3Ô∏è Ch·ªçn v·ªã tr√≠ ng∆∞·ªùi d√πng
# ======================
st.subheader("üìç Ch·ªçn v·ªã tr√≠ c·ªßa b·∫°n")

# D√πng session_state ƒë·ªÉ l∆∞u to·∫° ƒë·ªô tr√°nh b·ªã reset
if "clicked_coords" not in st.session_state:
    st.session_state.clicked_coords = None

# Tu·ª≥ ch·ªçn l·∫•y GPS ho·∫∑c ch·ªçn tr√™n b·∫£n ƒë·ªì
option = st.radio(
    "Ch·ªçn c√°ch x√°c ƒë·ªãnh v·ªã tr√≠:",
    ("L·∫•y t·ª´ GPS", "Ch·ªçn th·ªß c√¥ng tr√™n b·∫£n ƒë·ªì")
)

if option == "L·∫•y t·ª´ GPS":
    st.write("üëâ Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ l·∫•y v·ªã tr√≠ GPS:")
    location = get_geolocation()
    if st.button("üì° L·∫•y v·ªã tr√≠ hi·ªán t·∫°i"):
        if location:
            lat = location['coords']['latitude']
            lon = location['coords']['longitude']
            st.session_state.clicked_coords = (lat, lon)
            # st.success(f"V·ªã tr√≠ GPS: ({lat:.5f}, {lon:.5f})")
        else:
            st.warning("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ ‚Äî vui l√≤ng c·∫•p quy·ªÅn truy c·∫≠p v·ªã tr√≠ cho tr√¨nh duy·ªát.")
elif option == "Ch·ªçn th·ªß c√¥ng tr√™n b·∫£n ƒë·ªì":
    st.info("üëâ Click tr·ª±c ti·∫øp tr√™n b·∫£n ƒë·ªì ƒë·ªÉ ch·ªçn v·ªã tr√≠:")
    st_map = st_folium(m, width=900, height=600)
    if st_map and st_map.get("last_clicked"):
        lat = st_map["last_clicked"]["lat"]
        lon = st_map["last_clicked"]["lng"]
        st.session_state.clicked_coords = (lat, lon)
        st.success(f"V·ªã tr√≠ th·ªß c√¥ng: ({lat:.5f}, {lon:.5f})")
        
if st.button("üóëÔ∏è Xo√° v·ªã tr√≠ GPS ƒë√£ l∆∞u"):
    st.session_state.clicked_coords = None
    st.info("ƒê√£ xo√° v·ªã tr√≠, vui l√≤ng l·∫•y l·∫°i GPS m·ªõi.")
# L·∫•y ra to·∫° ƒë·ªô hi·ªán t·∫°i t·ª´ session_state
clicked_coords = st.session_state.clicked_coords

# ======================
# 4Ô∏è Ph√¢n t√≠ch k·∫øt qu·∫£
# ======================
if clicked_coords:
    lat, lon = clicked_coords
    st.success(f"V·ªã tr√≠ ƒë√£ ch·ªçn: ({lat:.5f}, {lon:.5f})")

    # Chuy·ªÉn sang CRS m√©t ƒë·ªÉ t√≠nh kho·∫£ng c√°ch
    health_facilities_utm = health_facilities.to_crs(epsg=3405)
    clicked_point_gdf = gpd.GeoDataFrame(geometry=[Point(lon, lat)], crs="EPSG:4326").to_crs(epsg=3405)

    # T√≠nh kho·∫£ng c√°ch
    health_facilities_utm["distance_m"] = health_facilities_utm.distance(clicked_point_gdf.iloc[0].geometry)

    # 4.1. L·∫•y 3 c∆° s·ªü g·∫ßn nh·∫•t
    nearest = health_facilities_utm.nsmallest(3, "distance_m").to_crs(epsg=4326)
    st.subheader("üè• 3 c∆° s·ªü y t·∫ø g·∫ßn nh·∫•t:")
    for _, row in nearest.iterrows():
        st.write(f"- **{row['name']}** ‚Äî {row['distance_m']:.0f} m ‚Äî ({row['amenity']})")

    # 4.2. Th√™m buffer
    buffer_radius = 3000
    buffer_area = clicked_point_gdf.buffer(buffer_radius)
    facilities_in_buffer = health_facilities_utm[health_facilities_utm.intersects(buffer_area.iloc[0])]
    count_in_buffer = len(facilities_in_buffer)

    st.subheader("üìä Ph√¢n t√≠ch v√πng ·∫£nh h∆∞·ªüng 3 km")
    st.write(f"- S·ªë c∆° s·ªü y t·∫ø trong b√°n k√≠nh **3 km**: **{count_in_buffer}**")

    # 4.3. V·∫Ω b·∫£n ƒë·ªì k·∫øt qu·∫£ (t·∫•t c·∫£ c∆° s·ªü y t·∫ø)
    m2 = folium.Map(location=[lat, lon], zoom_start=12, tiles="CartoDB positron")

    # V·∫Ω buffer 3km
    folium.Circle(
        location=[lat, lon],
        radius=buffer_radius,
        color='blue',
        fill=True,
        fill_opacity=0.1,
        popup='Ph·∫°m vi 3 km'
    ).add_to(m2)

    # Marker ng∆∞·ªùi d√πng
    folium.Marker(
        [lat, lon],
        popup="V·ªã tr√≠ c·ªßa b·∫°n",
        icon=folium.Icon(color="blue", icon="user", prefix="fa")
    ).add_to(m2)

    # ƒê·ªãnh nghƒ©a m√†u theo lo·∫°i c∆° s·ªü
    color_map = {
        "hospital": "red",
        "clinic": "green",
        "doctors": "orange",
        "Kh√¥ng r√µ": "gray"
    }

    # V·∫Ω t·∫•t c·∫£ c√°c c∆° s·ªü y t·∫ø v·ªõi m√†u t∆∞∆°ng ·ª©ng
    for _, row in health_facilities.iterrows():
        color = color_map.get(row["amenity"], "gray")
        folium.CircleMarker(
            location=[row.geometry.y, row.geometry.x],
            radius=5,
            color=color,
            fill=True,
            fill_opacity=0.7,
            popup=f"{row['name']} ({row['amenity']})"
        ).add_to(m2)

    # V·∫Ω 3 c∆° s·ªü g·∫ßn nh·∫•t (n·ªïi b·∫≠t)
    for _, row in nearest.iterrows():
        folium.CircleMarker(
            location=[row.geometry.y, row.geometry.x],
            radius=9,
            color="darkred",
            fill=True,
            fill_opacity=0.9,
            popup=f"üè• {row['name']} ‚Äî {row['distance_m']:.0f} m"
        ).add_to(m2)

    # Th√™m ch√∫ th√≠ch m√†u (legend)
    legend_html = """
    <div style="position: fixed; 
                bottom: 40px; left: 40px; width: 210px; height: 130px; 
                background-color: white; z-index:9999; font-size:14px;
                border:2px solid grey; border-radius:10px; padding:10px;">
        <b>ü©∫ Ch√∫ th√≠ch m√†u</b><br>
        <i style="color:red;">‚óè</i> B·ªánh vi·ªán<br>
        <i style="color:green;">‚óè</i> Ph√≤ng kh√°m<br>
        <i style="color:orange;">‚óè</i> B√°c sƒ©<br>
        <i style="color:gray;">‚óè</i> Kh√°c<br>
        <i style="color:darkred;">‚óè</i> C∆° s·ªü g·∫ßn nh·∫•t
    </div>
    """
    m2.get_root().html.add_child(folium.Element(legend_html))

    st.write("üó∫Ô∏è **B·∫£n ƒë·ªì k·∫øt qu·∫£ (to√†n H√† N·ªôi):**")
    st_folium(m2, width=900, height=600)

    # 4.4. Th·ªëng k√™ lo·∫°i h√¨nh trong b√°n k√≠nh 3 km (ƒë·∫∑t sau b·∫£n ƒë·ªì)
    if count_in_buffer > 0:
        amenity_counts = facilities_in_buffer['amenity'].value_counts()
        fig, ax = plt.subplots()
        amenity_counts.plot(kind='bar', ax=ax, color=['red', 'green', 'orange', 'gray'])
        ax.set_title("Ph√¢n b·ªë lo·∫°i h√¨nh c∆° s·ªü y t·∫ø trong b√°n k√≠nh 3 km")
        ax.set_ylabel("S·ªë l∆∞·ª£ng")
        st.pyplot(fig)
    else:
        st.info("Kh√¥ng c√≥ c∆° s·ªü y t·∫ø n√†o trong ph·∫°m vi 3 km.")
